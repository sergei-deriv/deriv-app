name: Remote Config Backup Download
description: Download remote config backup
inputs:
  REMOTE_CONFIG_URL:
    description: "Remote config backup URL"
  GPG_PRIVATE_KEY:
    description: "GPG private key"
  GPG_PASSPHRASE:
    description: "GPG passphrase"
  GITHUB_TOKEN:
    description: "GitHub token"
runs:
  using: composite
  steps:
    - name: Download remote config backup
      run: |
        echo "Downloading remote config backup"
        curl ${{ inputs.REMOTE_CONFIG_URL }} > packages/api/src/remote_config.json
        echo "Remote Config backup downloaded successfully!"
      shell: bash
    - name: Import GPG key
      if: github.ref == 'refs/heads/master'
      id: import-gpg
      uses: deriv-com/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ inputs.GPG_PRIVATE_KEY }}
        passphrase: ${{ inputs.GPG_PASSPHRASE }}
        git_user_signingkey: true
        git_commit_gpgsign: true
    - name: commit changes
      if: github.ref == 'refs/heads/master'
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
        GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
        GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
        GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
      run: |
        branch_name="remote_config_update_branch"

        if [ -z "$(git status --porcelain)" ]; then
            echo "No changes to commit, Not creating a PR."
        else
            echo "Changes detected, creating a PR"

            # Checkout to remote config branch
            git fetch origin
            git checkout "$branch_name" || git checkout -b "$branch_name" origin/"$branch_name"
            
            # Commit the newly downloaded file
            cd $(git rev-parse --show-toplevel)
            git add packages/api/src/remote_config.json
            git commit -m "ðŸ¤– Remote Config file update ðŸ¤–"

            # Force push to this branch in case a previous run created it.
            git push --set-upstream origin "$branch_name" -f

            sudo apt install gh
            gh auth login --with-token <<< ${{ env.GITHUB_TOKEN }}
            gh pr close "$branch_name" || true
            gh pr create --base "master" --title "Sync Remote Config File ðŸ¤–" --head "binary-com:$branch_name" --body "This is an automated Pull Request designed to synchronize our project's Remote Config from Its origin. It checks for the changes in the remote config URL and in case of any change, it will update it using this PR."
        fi
      shell: bash
